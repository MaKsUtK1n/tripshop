from telebot import TeleBot
from telebot.types import *
from config import *
from sqlite3 import Connection
from time import time, ctime
from kb import *
from CryptoPay import CryptoPay
from CrystalPay import CrystalPay
from os import listdir, system
from threading import Thread
from pyrogram import Client
import requests
import json




CryptoPay = CryptoPay(CRYPTOBOT_TOKEN)
CrystalPay = CrystalPay(CRYSTALPAY_AUTH_LOGIN, CRYSTALPAY_AUTH_SECRET)
bot = TeleBot(BOT_TOKEN, "HTML")
con = Connection("db.db", isolation_level=None, check_same_thread=False)
api_key = "db14f2bb-aa03-4d45-8269-3a0254ab0fb1"
def get_data(id: int):
    with con:
        cursor = con.cursor()
        cursor.execute("SELECT * FROM users WHERE id=?", (id,))
        data = cursor.fetchone()
        if data is None:
            data = (id, 0.0, 0.0, time(), None, False)
            cursor.execute("INSERT INTO users VALUES(?,?,?,?,?,?)", data)
        return data
def get_products():
    with con:
        cursor = con.cursor()
        cursor.execute("SELECT * FROM products")
        products = cursor.fetchall()
        res = []
        for product in products:
            res.append(product[0])
        return res
def get_categories():
    with con:
        cursor = con.cursor()
        cursor.execute("SELECT * FROM products")
        products = cursor.fetchall()
    catalogs = set()
    for product in products:
        catalogs.add(product[4])
    return list(catalogs)
def CqueryFunc(*args):
    return lambda sth: sth.data in args    
def is_sub(message: Message):
    print("is_sub funcrion")
    try:
        if bot.get_chat_member(CHANNEL_ID, message.from_user.id).status == "left":
            return True
        else:
            False
    except:
        return False



@bot.message_handler(func=is_sub)
def not_sub(message):
    bot.send_message(message.chat.id, f"<b>‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:</b>", reply_markup=unsub_kb())



@bot.callback_query_handler(lambda call: call.data == "submit_fiz_rf")
def submit_fiz_rf_handler(call):
    data = get_data(call.from_user.id)
    if data[1] <= 2.5:
        bot.answer_callback_query(call.id, "–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    else:
        bot.edit_message_text(f"""<b>üöÄ –¢–æ–≤–∞—Ä: ‚úàÔ∏è Telegram accounts | 2.5$     
üéÅ –û–ø–∏—Å–∞–Ω–∏–µ: <u>–ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤–∞—Å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ üåê</u></b>""", call.message.chat.id, call.message.id, reply_markup=submit_fiz_rf_kb())


@bot.message_handler(['online'])
def online_hander(message: Message):
    with con:
        cursor = con.cursor()
        cursor.execute("SELECT  * FROM users")
        bot.reply_to(message, f"<b>–í –±–æ—Ç–µ {len(cursor.fetchall())} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>")


@bot.message_handler(['db'])
def database(message):
    if message.from_user.id != CODER_ID: return
    bot.send_document(message.chat.id, open("db.db", 'rb').read())


@bot.callback_query_handler(lambda call: call.data == "ref_system")
def ref_system_handler(call: CallbackQuery):
    data = get_data(call.from_user.id)
    with con:
        cursor = con.cursor()
        cursor.execute("SELECT * FROM users WHERE ref=?", (call.from_user.id,))
        refs = cursor.fetchall()
    bot.edit_message_text(f"""<b>üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: —Å—Å—ã–ª–∫–∞ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
üíµ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {data[2]}$
üåê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(refs)}

üöÄ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å: 5% –æ—Ç –≤—Å–µ—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>""", call.message.chat.id, call.message.id, reply_markup=ref_system_kb())



@bot.callback_query_handler(CqueryFunc("user_agree"))
def user_agree_handler(call: CallbackQuery):
    with con:
        con.cursor().execute("UPDATE users SET license_submit=? WHERE id=?", (True, call.from_user.id))
    bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ! –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞!")
    start_handler(call)


def code_hadn(message: Message, phone_number: str):
    app = sessions_adding[phone_number][0]
    try:
        code = message.text.strip()
        sCode = sessions_adding[phone_number][1]
        app.sign_in(phone_number, sCode.phone_code_hash, code)
        app.disconnect()
        bot.reply_to(message, "—Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
    except:
        try:
            app.disconnect()
        except:
            ...
        os.remove(f"sessions/{phone_number}.session")
        bot.reply_to(message, "–û—à–∏–±–∫–∞, –ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ")

import asyncio

def phone_adding_handlea(message):
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    phone = message.text.strip().replace(" ", "")
    app = Client(f"sessions/{phone}", 25389095, "a715da4e82e7a2bab63fef6364c62596")
    app.connect()
    sCode = app.send_code(phone)
    sessions_adding[phone] = [app, sCode]
    msg = bot.send_message(message.chat.id, "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å–∫–∏–Ω—å –µ–≥–æ")
    bot.register_next_step_handler(msg, code_hadn, phone)
    


sessions_adding = {"79998887766": ["ClientObject", "sentCodeObject"]}
@bot.message_handler(['add_session'])
def add_session_handler(message: Message):
    if message.from_user.id != OWNER_ID: return
    msg = bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    bot.register_next_step_handler(msg, phone_adding_handlea)


@bot.callback_query_handler(CqueryFunc(*get_products()))
def fiz_rf_handle(call: CallbackQuery):
    with con:
        cursor = con.cursor()
        cursor.execute("SELECT * FROM products WHERE shortname=?", (call.data,))
        product_info = cursor.fetchone()
        bot.edit_message_text(f"<b>üöÄ –¢–æ–≤–∞—Ä: {product_info[1]} | {product_info[5]}$\nüéÅ –û–ø–∏—Å–∞–Ω–∏–µ: {product_info[2]}</b>", call.message.chat.id, call.message.id, reply_markup=submit_buy(call.data))


@bot.callback_query_handler(lambda call: call.data == "fiz_rf_code")
def fiz_rf_code_handle(call: CallbackQuery):
    session_name = call.message.text.split("\n")[5].replace('üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ', "")
    with con:
        cursor = con.cursor()
        cursor.execute("SELECT * FROM codes WHERE session_name=?", (session_name,))
        session_data = cursor.fetchone()
        if session_data is None:
            bot.answer_callback_query(call.id, "–ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", True)
            catalogs_handler(call)
        elif session_data[2] is None:
            bot.answer_callback_query(call.id, "–ö–æ–¥ –µ—â–µ –Ω–µ –ø—Ä–∏—à–µ–ª, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ!")
        else:
            cursor.execute("UPDATE users SET balance=balance-? WHERE id=?", (2.5, call.from_user.id))
            bot.send_message(OWNER_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –∫—É–ø–∏–ª —Å–µ—Å—Å–∏—é —Å –Ω–æ–º–µ—Ä–æ–º {session_data[0]} –∑–∞ 2.5$")
            bot.edit_message_text(f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{session_name}</code>\n\n–ö–æ–¥: <tg-spoiler>{session_data[2]}</tg-spoiler></b>", call.message.chat.id, call.message.id)


@bot.callback_query_handler(lambda call: call.data.startswith("premium;"))
def submit_premium(call: CallbackQuery):
    data = get_data(call.from_user.id)
    month = call.data.split(";")[1]
    username = call.data.split(";")[2]
    url2 = "https://tg.parssms.info/v1/premium/price"
    payload2 = ""
    headers2 = {
        'Content-Type': 'application/json',
        'api-key': api_key,
        }
    response2 = requests.request("GET", url2, headers=headers2, data=payload2).json()
    for priceinfo in response2:
        match priceinfo['duration']:
            case "1 year":
                duration = 12
            case "6 months":
                duration = 6
            case "3 months":
                duration = 3
        if duration == int(month):
            price = priceinfo['approx_price_usd'].replace("$", "")
    if data[1] < float(price) * TG_SERVICE_EXTRA:
        bot.answer_callback_query(call.id, "–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
    else:
        with con:
            cursor = con.cursor()
            cursor.execute("UPDATE users SET balance=balance-? WHERE id=?", (float(price), call.from_user.id))
            url = "https://tg.parssms.info/v1/premium/payment"
            payload = json.dumps({
            "query": username,
            "months": str(month)
            })
            headers = {
            'Content-Type': 'application/json',
            'api-key': api_key
            }
            response = requests.post(url, headers=headers, data=payload).json()
            if "message" in response:
                if "not enough" in response['message']:
                    bot.send_message(OWNER_ID, f"–ù—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫, {response['message']}")
                    bot.answer_callback_query(call.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–µ–º–∏—É–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", True)
                else:
                    cursor.execute("UPDATE users SET balance=balance-? WHERE id=?", (float(price) * TG_SERVICE_EXTRA, call.from_user.id))
                    bot.edit_message_text(f"<b>–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {response['message']}\nID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {response['transaction_id']}</b>", call.message.chat.id, call.message.id, reply_markup=start_kb())
                    bot.send_message(OWNER_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} –∫—É–ø–∏–ª —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–µ–º–∏—É–º –Ω–∞ {month} –º–µ—Å—è—Ü–µ–≤ –∑–∞ ${float(price) * TG_SERVICE_EXTRA} –¥–ª—è {username}")



def premiumuserInfo(message, old_id):
    data = get_data(message.from_user.id)
    username = message.text.strip()
    url = "https://tg.parssms.info/v1/premium/search"
    payload = json.dumps({
 "query": username,
 "months": "3"
})
    headers = {
 'Content-Type': 'application/json',
 'api-key': api_key
}
    response = requests.post(url, headers=headers, data=payload).json()
    if not response['ok']:
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="premiumCancel"))
        msg = bot.edit_message_text(f"""<b>üíé Telegram Premium          
                             
‚Ä¢ üéÅ 3/6/12 –º–µ—Å—è—Ü–µ–≤ ‚Äì –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–º.                                        

‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º (–ø—Ä–µ–º–∏—É–º –ø–æ—Å—Ç—É–ø–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤ —Ç–µ—á–µ–Ω–∏–µ 20 —Å–µ–∫—É–Ω–¥)\n\n–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>""", message.chat.id, old_id, reply_markup=keyboard)
        bot.register_next_step_handler(msg, premiumuserInfo, msg.id)
    else:
        url2 = "https://tg.parssms.info/v1/premium/price"
        payload2 = ""
        headers2 = {
        'Content-Type': 'application/json',
        'api-key': api_key,
        }
        response2 = requests.request("GET", url2, headers=headers2, data=payload2).json()
        keyboard = InlineKeyboardMarkup()
        for priceinfo in response2:
            match priceinfo['duration']:
                case "1 year":
                    pricename = "1 –≥–æ–¥"
                    duration = 12
                case "6 months":
                    pricename = "6 –º–µ—Å—è—Ü–µ–≤"
                    duration = 6
                case "3 months":
                    duration = 3
                    pricename = "3 –º–µ—Å—è—Ü–∞"
            keyboard.row(InlineKeyboardButton(f"üî∞ {pricename} | {round(float(priceinfo['approx_price_usd'].replace('$', '')) * TG_SERVICE_EXTRA, 2)}", callback_data=f"premium;{duration};{username}"))
        keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è–û—Ç–º–µ–Ω–∞", callback_data="tgCancel"))
        bot.edit_message_text(f"""<b>üõí –ü–æ–∫—É–ø–∫–∞ üéÅ Telegram Premium

üè¶ –ë–∞–ª–∞–Ω—Å: <code>{data[1]}$</code>

üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <a href="https://t.me/{username}">{response['found']['name']}</a>

–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å</b>""", message.chat.id, old_id, reply_markup=keyboard)
    try:
        bot.delete_message(message.chat.id, message.id)
    except:
        ...


@bot.callback_query_handler(lambda call: call.data.startswith("strs"))
def buying_stars_handler(call: CallbackQuery):
    username = call.data.split(";")[1]
    count = int(call.data.split(';')[2])
    amount = count * 0.015 * TG_SERVICE_EXTRA
    data = get_data(call.from_user.id)
    if data[1] < amount:
        bot.answer_callback_query(call.id, f"–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ ${round(amount - data[1], 2)} –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", True)
        return 
    url = "https://tg.parssms.info/v1/stars/payment"
    payload = json.dumps({
 "query": username,
 "quantity": str(count)
})
    headers = {
 'Content-Type': 'application/json',
 'api-key': api_key
}
    response = requests.post(url, headers=headers, data=payload).json()
    if "error" in response['message']:
        need = response['message'].split("Ton, Needs: ")[1].split(" Ton")[0]
        bot.send_message(OWNER_ID, f"–ù—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å TON –∫–æ—à–µ–ª–µ–∫ –Ω–∞ {need} TON")
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É!")
    else:
        with con: 
            cursor = con.cursor()
            cursor.execute("UPDATE users SET balance=balance-? WHERE id=?", (amount, call.from_user.id))
        bot.send_message(OWNER_ID, f"{call.from_user.username} –∫—É–ø–∏–ª {count} –∑–≤–µ–∑–¥ –¥–ª—è {username} –∑–∞ {amount}")
        bot.edit_message_text(f"<b>–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {response['message']}\nID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {response['transaction_id']}</b>", call.message.chat.id, call.message.id, reply_markup=start_kb())




def starscounthandler(message, old_id, username, name):
    data = get_data(message.from_user.id)
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è–û—Ç–º–µ–Ω–∞", callback_data="tgCancel"))
    try:
        count = int(message.text.strip())
        if count < 50 or count > 1000000:
            msg = bot.edit_message_text(f"""üí´ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è {name}:

–ú–∏–Ω–∏–º—É–º: 50 –∑–≤–µ–∑–¥
–ú–∞–∫—Å–∏–º—É–º: 1 000 000 –∑–≤–µ–∑–¥
                                        
–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –æ—Ç 50 –¥–æ 1–º–ª–Ω –∑–≤–µ–∑–¥</b>""", message.chat.id, old_id, reply_markup=keyboard)
            bot.register_next_step_handler(msg, starscounthandler, msg.id, username, name)
        else:
            keyboard = InlineKeyboardMarkup()
            keyboard.row(InlineKeyboardButton("‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"strs;{username};{count}"))
            keyboard.row(InlineKeyboardButton("‚Ü©Ô∏è–û—Ç–º–µ–Ω–∞", callback_data="tgCancel"))
            bot.edit_message_text(f"""<b>
‚≠êÔ∏è –üo–∫y–ø–∫–∞ –∑–≤—ë–∑–¥
                                  
üè¶ –ë–∞–ª–∞–Ω—Å: <code>{data[1]}$</code>

üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <a href="https://t.me/{username}">{name}</a>
üíé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{count}</code>
üí∞ –¶–µ–Ω–∞: <code>{round(count * 0.015 * TG_SERVICE_EXTRA, 2)}</code>

üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –øo–∫y–ø–∫—É –∑–≤—ë–∑–¥</b>""", message.chat.id, old_id, reply_markup=keyboard)
    except Exception as e:
        msg = bot.edit_message_text(f"""<b>üí´ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è {name}:

–ú–∏–Ω–∏–º—É–º: 50 –∑–≤–µ–∑–¥
–ú–∞–∫—Å–∏–º—É–º: 1 000 000 –∑–≤–µ–∑–¥
                                    
–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ</b>""", message.chat.id, old_id, reply_markup=keyboard)
        bot.register_next_step_handler(msg, starscounthandler, msg.id, username, name)
    try:
        bot.delete_message(message.chat.id, message.id)
    except:
        ...
        



def starsuserInfo(message, old_id):
    data = get_data(message.from_user.id)
    username = message.text.strip()
    url = "https://tg.parssms.info/v1/stars/search"
    payload = json.dumps({
 "query": username,
 "quantity": "50"
})
    headers = {
 'Content-Type': 'application/json',
 'api-key': api_key
}
    response = requests.post(url, headers=headers, data=payload).json()
    if not response['ok']:
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è–û—Ç–º–µ–Ω–∞", callback_data="tgCancel"))
        msg = bot.edit_message_text(f"""<b>‚≠êÔ∏è Telegram Stars

‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –∑–≤–µ–∑–¥—ã: 1.80‚ÇΩ

‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã (–∑–≤–µ–∑–¥—ã –ø–æ—Å—Ç—É–ø—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20 —Å–µ–∫—É–Ω–¥)
                                    
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>""", message.chat.id, old_id, reply_markup=keyboard)
        bot.register_next_step_handler(msg, starsuserInfo, msg.id)
    else:
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è–û—Ç–º–µ–Ω–∞", callback_data="tgCancel"))
        msg = bot.edit_message_text(f"""<b>üí´ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è {response['found']['name']}

–ú–∏–Ω–∏–º—É–º: 50 –∑–≤–µ–∑–¥
–ú–∞–∫—Å–∏–º—É–º: 1 000 000 –∑–≤–µ–∑–¥</b>""", message.chat.id, old_id, reply_markup=keyboard)
        bot.register_next_step_handler(msg, starscounthandler, msg.id, username, response['found']['name'])
    try:
        bot.delete_message(message.chat.id, message.id)
    except:
        ...


@bot.callback_query_handler(lambda call: call.data == "tgCancel")
def tgCancelHandler(call: CallbackQuery):
    bot.clear_step_handler(call.message)
    catalogs_handler(call)


@bot.callback_query_handler(lambda call: call.data.startswith("buy_"))
def submit_handler(call: CallbackQuery):
    data = get_data(call.from_user.id)
    shortname = call.data.replace("buy_", "")
    match shortname:
        case "fiz_rf":
            if data[1] < 2.5:
                bot.answer_callback_query(call.id, "–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç(\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", True)
            else:
                sessions = listdir("sessions")
                if sessions == []:
                    bot.answer_callback_query(call.id, "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ –±–æ—Ç–µ –Ω–µ—Ç —Å–µ—Å—Å–∏–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", True)
                    bot.send_message(OWNER_ID, "<b>–í –±–æ—Ç–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–µ—Å—Å–∏–∏!\n–î–æ–±–∞–≤—å –µ—â–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add_session</b>")
                else:
                    session_name = sessions[0].replace(".session", "")
                    keyboard = InlineKeyboardMarkup()
                    keyboard.row(InlineKeyboardButton("üì•–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", callback_data="fiz_rf_code"))
                    with con:
                        cursor = con.cursor()
                        cursor.execute("INSERT INTO codes VALUES(?,?,?)", (session_name, time(), None))
                    Thread(target=system, args=(f"python session_message_waiter.py {session_name}",)).start()
                    bot.edit_message_text(f"""<b>‚úàÔ∏è –ü–æ–∫—É–ø–∫–∞ Telegram accounts

üè¶ –ë–∞–ª–∞–Ω—Å: <code>{data[1]}$</code>

üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{call.from_user.username}
üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{session_name}</code>
üí∞ –¶–µ–Ω–∞: <code>2.5$</code>

üöÄ–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!</b>""", call.message.chat.id, call.message.id, reply_markup=keyboard)
        case "premium":
            keyboard = InlineKeyboardMarkup()
            keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è–û—Ç–º–µ–Ω–∞", callback_data="tgCancel"))
            msg = bot.edit_message_text(f"""<b>üíé Telegram Premium          
                             
‚Ä¢ üéÅ 3/6/12 –º–µ—Å—è—Ü–µ–≤ ‚Äì –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–º.                                        

‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º (–ø—Ä–µ–º–∏—É–º –ø–æ—Å—Ç—É–ø–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤ —Ç–µ—á–µ–Ω–∏–µ 20 —Å–µ–∫—É–Ω–¥)</b>""", call.message.chat.id, call.message.id, reply_markup=keyboard)
            bot.register_next_step_handler(msg, premiumuserInfo, msg.id)
        case "stars":
            keyboard = InlineKeyboardMarkup()
            keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è–û—Ç–º–µ–Ω–∞", callback_data="tgCancel"))
            msg = bot.edit_message_text(f"""<b>‚≠êÔ∏è Telegram Stars

‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –∑–≤–µ–∑–¥—ã: 1.80‚ÇΩ

‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã (–∑–≤–µ–∑–¥—ã –ø–æ—Å—Ç—É–ø—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤ —Ç–µ—á–µ–Ω–∏–µ 20 —Å–µ–∫—É–Ω–¥)</b>""", call.message.chat.id, call.message.id, reply_markup=keyboard)
            bot.register_next_step_handler(msg, starsuserInfo, msg.id)
        case shortname:
            with con:
                cursor = con.cursor()
                cursor.execute("SELECT * FROM products WHERE shortname=?", (shortname,))
                product_info = cursor.fetchone()
                if data[1] < product_info[5]:
                    bot.answer_callback_query(call.id, "–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç(\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", True)
                else:
                    cursor.execute("UPDATE users SET balance=balance-? WHERE id=?", (product_info[5], data[0]))
                    bot.edit_message_text(f"<b>üöÄ –¢–æ–≤–∞—Ä: {product_info[1]} | {product_info[5]}$\nüéÅ –û–ø–∏—Å–∞–Ω–∏–µ: {product_info[2]}\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑</b>", call.message.chat.id, call.message.id, reply_markup=buyed_shit_kb())
                    bot.send_message(OWNER_ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –∑–∞–∫–∞–∑–∞–ª –∏ –æ–ø–ª–∞—Ç–∏–ª {product_info[1]}', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", f'tg://user?id={call.from_user.id}')))



@bot.callback_query_handler(CqueryFunc(*get_categories()))
def categories_handler(call: CallbackQuery):
    with con:
        cursor = con.cursor()
        cursor.execute("SELECT * FROM products WHERE category=?", (call.data,))
        products = cursor.fetchall()
    keyboard = InlineKeyboardMarkup()
    for product in products:
        keyboard.row(InlineKeyboardButton(product[1], callback_data=f"{product[0]}"))
    keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="start"))
    bot.edit_message_text(f"<b>–¢–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {call.data}\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b>", call.message.chat.id, call.message.id, reply_markup=keyboard)
    


@bot.callback_query_handler(CqueryFunc("catalogs"))
def catalogs_handler(call: CallbackQuery):
    with con:
        cursor = con.cursor()
        cursor.execute("SELECT * FROM products")
        products = cursor.fetchall()
    bot.edit_message_text("""<b>üöÄ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —É—Å–ª—É–≥
–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –≤–∞–º —É—Å–ª—É–≥—É</b>""", call.message.chat.id, call.message.id, reply_markup=catalog_kb(products))



@bot.callback_query_handler(CqueryFunc("start"))
@bot.message_handler(['start'])
def start_handler(message: Message):
    data = get_data(message.from_user.id)
    if not data[5]:
        return bot.send_message(message.chat.id, """<b>üé© –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º:
–∫–Ω–æ–ø–∫–∏</b>""", reply_markup=user_agreement_kb())
    try:
        ref = int(message.text.replace("/start ", ""))
        with con:
            cursor = con.cursor()
            cursor.execute("SELECT * FROM users WHERE id=?", (ref,))
            if cursor.fetchone() != []:
                cursor.execute("UPDATE users SET ref=? WHERE id=?", (ref, message.from_user.id))
                bot.send_message(ref, f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n\n—Ç–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {int(REF_PERCENT * 100)}% —Å –µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π!</b>")
    except:
        ...
    if type(message) is Message:
        bot.send_sticker(message.chat.id, "CAACAgEAAxkBAAEOhZloKyyJcJTZUxqQ6s1UqheNX27BewACGwMAArAHGESRLvZwzZJ9sjYE")
        bot.send_message(message.chat.id, """<b>üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trip Shop!

üìå –í—ã –ø–æ–ø–∞–ª–∏ –≤ <u>–ª—É—á—à–∏–π</u> —Ü–∏—Ñ—Ä–æ–≤–æ–π –º–∞–≥–∞–∑–∏–Ω, –≤–µ–¥—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã —è–≤–ª—è–µ–º—Å—è <u>–ª–∏–¥–µ—Ä–æ–º</u> —Å—Ä–µ–¥–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –£ –Ω–∞—Å —Å–∞–º—ã–µ –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã, –æ—Ç–∑—ã–≤—á–∏–≤–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.</b>""", reply_markup=start_kb())
    else:
        bot.edit_message_text("""<b>üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trip Shop!

üìå –í—ã –ø–æ–ø–∞–ª–∏ –≤ <u>–ª—É—á—à–∏–π</u> —Ü–∏—Ñ—Ä–æ–≤–æ–π –º–∞–≥–∞–∑–∏–Ω, –≤–µ–¥—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã —è–≤–ª—è–µ–º—Å—è <u>–ª–∏–¥–µ—Ä–æ–º</u> —Å—Ä–µ–¥–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –£ –Ω–∞—Å —Å–∞–º—ã–µ –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã, –æ—Ç–∑—ã–≤—á–∏–≤–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.</b>""", message.message.chat.id, message.message.id, reply_markup=start_kb())


@bot.callback_query_handler(CqueryFunc("profile"))
def profile(call: CallbackQuery):
    data = get_data(call.from_user.id)
    with con:
        cur = con.cursor()
        cur.execute("SELECT * FROM users WHERE ref=?", (call.from_user.id,))
        ref_count = len(cur.fetchall())
    text = f"""<b>
üë§–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
üíé–Æ–∑–µ—Ä: <b>@{call.from_user.username}</b>
üÜîID: <code>{call.from_user.id}</code>
üí∞–ë–∞–ª–∞–Ω—Å: <code>${data[1]}</code>
üíµ–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: <code>{data[2]}</code>
üìå–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>{ctime(data[3])}</code>
üë•–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{ref_count}</code>
</b>"""
    bot.edit_message_text(text, call.message.chat.id, call.message.id, reply_markup=profile_kb())


@bot.callback_query_handler(CqueryFunc("balance"))
def balance_handler(call: CallbackQuery):
    bot.edit_message_text("<b>üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>", call.message.chat.id, call.message.id, reply_markup=balance_kb())


@bot.callback_query_handler(CqueryFunc("check_payment"))
def check_payment_handler(call:CallbackQuery):
    txt = call.message.text.split("\n")
    payment_method = txt[0].replace("–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: ", "")
    invoice_id = txt[1].replace("–ê–π–¥–∏ –ø–ª–∞—Ç–µ–∂–∞: ", "")
    amount = float(txt[2].replace("–°—É–º–º–∞: ", ""))
    data = get_data(call.from_user.id)
    if payment_method != "cryptopay":
        invoice = CrystalPay.getInvoice(invoice_id)
        if invoice['state'] == "notpayed":
            bot.answer_callback_query(call.id, "–°—á–µ—Ç –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω!")
        else:
            bot.send_message(OWNER_ID, f"<b>{call.from_user.username} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {amount}</b>")
            with con:
                cursor = con.cursor()
                if not data[4] is None:
                    cursor.execute("UPDATE users SET balance=balance+? AND deposit=deposit+? WHERE id=?", (amount * REF_PERCENT, amount * REF_PERCENT, data[4]))
                    try: bot.send_message(data[4], f"<b>–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {amount}$\n\n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount * REF_PERCENT}$</b>")
                    except: ...
                cursor.execute("UPDATE users SET balance=balance+? WHERE id=?", (amount, call.from_user.id))
                bot.answer_callback_query(call.id, "–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!\n–ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫")
                profile(call)
    else:
        invoice = CryptoPay.get_invoice(invoice_id)
        if invoice['status'] != "paid":
            bot.answer_callback_query(call.id, "–°—á–µ—Ç –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω!")
        else:
            bot.send_message(OWNER_ID, f"<b>{call.from_user.username} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {amount}</b>")
            with con:
                cursor = con.cursor()
                if not data[4] is None:
                    cursor.execute("UPDATE users SET balance=balance+? AND deposit=deposit+? WHERE id=?", (amount * REF_PERCENT, amount * REF_PERCENT, data[4]))
                    try: bot.send_message(data[4], f"<b>–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {amount}$\n\n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount * REF_PERCENT}$</b>")
                    except: ...
                cursor.execute("UPDATE users SET balance=balance+? WHERE id=?", (amount, call.from_user.id))
                bot.answer_callback_query(call.id, "–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!\n–ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫")
                profile(call)


def amount_getter(message, old_message_id, payment_method):
    try:
        bot.delete_message(message.chat.id, message.id)
    except:
        ...
    try:
        amount = float(message.text.strip())
        if amount < MIN_DEPOSIT:
            msg = bot.edit_message_text(f"<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MIN_DEPOSIT}", message.chat.id, old_message_id)
            bot.register_next_step_handler(msg, amount_getter, old_message_id, payment_method)
        else:
            if payment_method != "cryptopay":
                invoice = CrystalPay.createInvoice(amount, redirect_url=f"https://t.me/({bot.get_me().username})")
                invoice_id = invoice['id']
                pay_url = invoice['url']
            else:
                invoice = CryptoPay.create_invoice(amount)
                invoice_id = invoice['invoice_id']
                pay_url = invoice['pay_url']
            keyboard = InlineKeyboardMarkup()
            keyboard.row(InlineKeyboardButton("üí∏–û–ø–ª–∞—Ç–∏—Ç—å", pay_url))
            keyboard.row(InlineKeyboardButton("üîÑ–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment"))
            bot.edit_message_text(f"<b>–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {payment_method}\n–ê–π–¥–∏ –ø–ª–∞—Ç–µ–∂–∞: {invoice_id}\n–°—É–º–º–∞: {amount}\n\n–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å!</b>", message.chat.id, old_message_id, reply_markup=keyboard)
    except:
        msg = bot.edit_message_text("<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", message.chat.id, old_message_id)
        bot.register_next_step_handler(msg, amount_getter, old_message_id, payment_method)
    

@bot.callback_query_handler(CqueryFunc("cryptopay", "crystalpay"))
def payment_method_handler(call: CallbackQuery):
    msg = bot.edit_message_text("<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>", call.message.chat.id, call.message.id, reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="balance_cancel")))
    bot.register_next_step_handler(msg, amount_getter, msg.id, call.data)


@bot.callback_query_handler(CqueryFunc("balance_cancel"))
def balance_cancel_handler(call: CallbackQuery):
    bot.clear_step_handler(call.message)
    balance_handler(call)


print(bot.get_me())
bot.infinity_polling()